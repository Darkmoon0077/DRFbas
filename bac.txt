    serializer_class = PostSerializer
    authentication_classes = [JWTAuthentication]
    permission_classes = [permissions.IsAuthenticated]



    @pytest.mark.django_db
def test_post():
    client = APIClient()
    client.post('/api/users/',data={'user': {
            'email': 'mercedes@gmail.com',
            'username': 'LewisHamilton',
            'password': 'Mercedes'}
    }, format = 'json')
    url = reverse('authorz:posts')
    payload = {
        'title': 'fuck',
        'body': 'you'}
    response = client.post(url, data=payload, format = 'json')
    assert response.status_code == status.HTTP_201_CREATED


    @pytest.mark.django_db
def test_post_list_authenticated(user):
    client = APIClient()
    user= client.post('/api/users/',data={'user': {
            'email': 'mercedes@gmail.com',
            'username': 'LewisHamilton',
            'password': 'Mercedes'}
    }, format = 'json')
    url = reverse('authorz:posts')
    token = AccessToken.for_user(user)
    client.credentials(HTTP_AUTHORIZATION=f'Bearer {token}')
    Post.objects.create(title='Test Post', body='This is a test post.', owner=user)
    response = client.get(url)

    assert response.status_code == status.HTTP_200_OK
    assert len(response.data) == 1

class NewLogView(APIView):
    permission_classes = (AllowAny,)
    renderer_classes = (UserJSONRenderer,)
    serializer_class = LoginSerializer
    @swagger_auto_schema(request_body=LoginSerializer)
    def posta(self, data1):
        user = data1.get('user', {})
        self._user_data = user
    def post(self, request):
        user = self.posta(request.data)
        serializer = self.serializer_class(data=user)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status=status.HTTP_200_OK)

    if request.user.is_authenticated:
            date_pass = Profile.objects.get(user=request.user.id).date_pass
            if date.today() - date_pass > timedelta(days=90):
                return HttpResponseRedirect(reverse_lazy('account_change_password'))